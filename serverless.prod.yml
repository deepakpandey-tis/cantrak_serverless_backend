
service: ${self:custom.serviceName}
  
  # You can pin your service to only deploy with a specific Serverless version
  # Check out our docs for more details
  # frameworkVersion: "=X.X.X"
  
plugins:
  # - serverless-offline
  # - serverless-s3-local
  # - serverless-prune-plugin

package:
  patterns:
    - '!.vscode/**'
    - '!.serverless/**'


provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: ap-southeast-1
  memorySize: 3000
  timeout: 29
  tracing:
    apiGateway: true
    lambda: true
  iam: 
    role: 
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: 
            - arn:aws:s3:::*
        - Effect: Allow
          Action:
            - sqs:*
          Resource: 
            - arn:aws:sqs:::*
        - Effect: Allow
          Action:
            - sns:*
          Resource: 
            - arn:aws:sns:::*
        - Effect: Allow
          Action:
            - rekognition:*
          Resource: 
            - arn:aws:rekognition:::*
        - Effect: Allow
          Action:
            - ses:*
          Resource: 
            - arn:aws:ses:::*
        - Effect: Allow
          Action:
            - cloudwatch:*
          Resource: 
            - arn:aws:cloudwatch:::*
        - Effect: Allow
          Action:
            - events:*
          Resource: 
            - arn:aws:events:::*                    
      managedPolicies:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess              
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DB_USER: servicemind
    DB_PASS: su99yTIS#2020
    DB_NAME: tis_database
    DB_HOST: servicemind-prod-instance-1.cq4cijk9avjt.ap-southeast-1.rds.amazonaws.com
    DB_PORT: 5432
    DB_HOST_READ_ONLY: servicemind-prod-instance-1-ap-southeast-1b.cq4cijk9avjt.ap-southeast-1.rds.amazonaws.com
    DB_PORT_READ_ONLY: 5432
    SITE_URL: https://d3m3k4hno3r3ok.cloudfront.net
    ORIGIN_URL: https://f46f62eq43.execute-api.ap-southeast-1.amazonaws.com/production
    JWT_PRIVATE_KEY: t678kuhh5k46j54lnklsfg8e60*&5664)b4&df4444#5
    S3_BUCKET_NAME: servicemind-resources-prod
    VAPID_PUBLIC_KEY: BMpCMLxldme4F8BHAKyz41cAEh8FgFvibgwdJrM7LH8Th5t47J84NVGZiPhuTOEKRBOzfsJMAgXQueLjPyoc8z0
    VAPID_PRIVATE_KEY: MwnSWApwHAJZXnhk6K1s9jqS_ndArrcMSGuI60c7gZc
    ACCESS_KEY_ID: AKIARCB5JALMMWQLCPHX
    SECRET_ACCESS_KEY: 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
    SQS_MAIL_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/073142960856/mail-queue
    SQS_LONG_JOBS_URL: https://sqs.ap-southeast-1.amazonaws.com/073142960856/long-jobs
    FROM_EMAIL_ADDRESS: no-reply@servicemind.asia
    APP_ENV: PRODUCTION
    S3_BUCKET_URL:  https://servicemind-resources-prod.s3.ap-southeast-1.amazonaws.com
    SOCKET_ENDPOINT: wss://84vtrodbe9.execute-api.ap-southeast-1.amazonaws.com/production
    CDN_URL: resources.servicemind.asia
    REDIS_HOST: prod-redis.7if0si.ng.0001.apse1.cache.amazonaws.com
    REDIS_PORT: 6379
    MNT_DIR: ${self:custom.localMountPath} 
    THIRDPARTY_SNS_ARN: arn:aws:sns:ap-southeast-1:351577941956:servicemind-thirdparty-notifications
    THIRDPARTY_SNS_ARN_REGION: ap-southeast-1
  vpc:
    securityGroupIds:
      - sg-0b04bfab1291e87d0
    subnetIds:
      - subnet-072b38f50b7ec4740
      - subnet-0d86435561ec54571
  

custom:
  serviceName: servicemind
  awsAccountId: "073142960856"
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: servicemind-resources-prod
  defaultStage: prod
  profiles:
    dev: dev
    stage: stage
    prod: prod
  efsAccessPoint: fsap-0e40c7589c6ba78ed
  localMountPath: /mnt/efs
  
  
functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true
  
  websocket:
    handler: src/handlers/socket.handler
    memorySize: 2048
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              # - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect

  auth:
    handler: src/handlers/socket.auth


  queueProcessor:
    handler: src/handlers/jobs.queueProcessor
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: 
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:mail-queue
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.


  longJobsProcessor:
    handler: src/handlers/jobs.longJobsProcessor
    memorySize: 5120
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:long-jobs
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.

          
  workOrderOverdueProcessor:
    handler: src/handlers/daily-tasks.workOrderOverdueProcessor
    memorySize: 512
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


  dailyDigestProcessor:
    handler: src/handlers/daily-tasks.dailyDigestProcessor
    memorySize: 1024
    timeout:  899                     # Max Time out is 15 mins..
    events:
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8 am Morning Thai Time..
          enabled: true        


  # dailyDbWakeUpProcessor:
  #   handler: src/handlers/daily-tasks.dBWakeUpTask
  #   memorySize: 256
  #   timeout:  300                     # Max Time out is 5 mins..
  #   events:
  #     - schedule:
  #         rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8:00 am Morning Thai Time..
  #         enabled: true
  #     - schedule:
  #         rate: cron(30 1 * * ? *)    # Utc 1 am every day i.e 8:30 am Morning Thai Time..
  #         enabled: true
  #     - schedule:
  #         rate: cron(0 2 * * ? *)    # Utc 1 am every day i.e 9 am Morning Thai Time..
  #         enabled: true     


resources:
  extensions:
    # Name of function <longJobsProcessor>
    LongJobsProcessorLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: 'arn:aws:elasticfilesystem:${self:provider.region}:${self:custom.awsAccountId}:access-point/${self:custom.efsAccessPoint}'
            LocalMountPath: '${self:custom.localMountPath}'