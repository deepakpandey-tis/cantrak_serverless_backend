
service:
  name: ${self:custom.serviceName}
  
  # You can pin your service to only deploy with a specific Serverless version
  # Check out our docs for more details
  # frameworkVersion: "=X.X.X"
  
plugins:
  # - serverless-apigw-binary
  - serverless-offline
  - serverless-prune-plugin
  # - serverless-dotenv-plugin
  - serverless-s3-local


package:
  exclude:
    - .vscode/**
    - .serverless/**


provider:
  name: aws
  runtime: nodejs12.x
  stage: production
  region: us-east-1
  memorySize: 3000
  timeout: 30
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - arn:aws:s3:::*
  iamManagedPolicies:
      - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess              
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DB_USER: servicemind
    DB_PASS: su99yTIS#2020
    DB_NAME: tis_database
    DB_HOST: tis-sv-db.cluster-c1klhwsjgssk.us-east-1.rds.amazonaws.com
    DB_PORT: 5432
    SITE_URL: https://d3lw11mvhjp3jm.cloudfront.net
    ORIGIN_URL: https://rme4pik2uf.execute-api.us-east-1.amazonaws.com/production
    JWT_PRIVATE_KEY: t978546456tttGFDDgut###be@e5yrgdf)(bu54654645
    S3_BUCKET_NAME: servicemind-resources
    VAPID_PUBLIC_KEY: BP1mVU-oBoplZiZzNkUzA5LcPP8ujiWbS0yZgm2QbBBhew9F59R21MXZb7i002JfihBz7jc8I5ITsQYVZ-EVvk0
    VAPID_PRIVATE_KEY: 5Jr-qKpJMn-KvpjSDhxxRDX7G8zNQnz5DPYIEnr64LU
    ACCESS_KEY_ID: AKIAQRTFBT5LS3MGPM73
    SECRET_ACCESS_KEY: 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
    SQS_MAIL_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/037792882519/mail-queue
    SQS_LONG_JOBS_URL: https://sqs.us-east-1.amazonaws.com/037792882519/long-jobs
    FROM_EMAIL_ADDRESS: important-notifications@servicemind.asia
    APP_ENV: PRODUCTION
    NOTIFIER_ACCESS_KEY_ID: AKIAQRTFBT5LUXG4X564
    NOTIFIER_SECRET_ACCESS_KEY: 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
    S3_BUCKET_URL: https://servicemind-resources.s3.amazonaws.com
    SOCKET_ENDPOINT: https://h7oq1mw2a1.execute-api.us-east-1.amazonaws.com/production
    CDN_URL: resources.servicemind.asia
    REDIS_HOST: tis-prod-redis.ftr6oh.0001.use1.cache.amazonaws.com
    REDIS_PORT: 6379
    MNT_DIR: ${self:custom.localMountPath}
  vpc:
    securityGroupIds:
      - sg-f4e38fd6
    subnetIds:
      - subnet-294c8076
      - subnet-cec80ba8
      - subnet-277fb106
      - subnet-e50093a8
  

custom:
  serviceName: servicemind-backend
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: servicemind-resources
  defaultStage: production
  profiles:
    dev: servicemind-dev
    production: servicemind-production
  efsAccessPoint: fsap-0c00dfe21523b194f
  localMountPath: /mnt/efs
  
  
functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true


  websocket:
    handler: src/handlers/socket.handler
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              # - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect


  auth:
    handler: src/handlers/socket.auth


  queueProcessor:
    handler: src/handlers/jobs.queueProcessor
    batchSize: 1                           # Using a batchSize of 1, so that messages succeed or fail on their own.
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: arn:aws:sqs:us-east-1:037792882519:mail-queue


  longJobsProcessor:
    handler: src/handlers/jobs.longJobsProcessor
    batchSize: 1                           # Using a batchSize of 1, so that messages succeed or fail on their own.
    memorySize: 5120
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: arn:aws:sqs:us-east-1:037792882519:long-jobs


  workOrderOverdueProcessor:
    handler: src/handlers/dailyTasks.workOrderOverdueProcessor
    memorySize: 512
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


  dailyDigestProcessor:
    handler: src/handlers/dailyTasks.dailyDigestProcessor
    memorySize: 1024
    timeout:  899                     # Max Time out is 15 mins..
    events:
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8 am Morning Thai Time..
          enabled: true        

dailyDbWakeUpProcessor:
    handler: src/handlers/dailyTasks.dBWakeUpTask
    memorySize: 256
    timeout:  300                     # Max Time out is 5 mins..
    events:
      - schedule:
          rate: cron(0 0 * * ? *)    # Utc 1 am every day i.e 7:00 am Morning Thai Time..
          enabled: true
      - schedule:
          rate: cron(30 0 * * ? *)    # Utc 1 am every day i.e 7:30 am Morning Thai Time..
          enabled: true
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8:00 am Morning Thai Time..
          enabled: true
      - schedule:
          rate: cron(30 1 * * ? *)    # Utc 1 am every day i.e 8:30 am Morning Thai Time..
          enabled: true
      - schedule:
          rate: cron(0 2 * * ? *)    # Utc 1 am every day i.e 9 am Morning Thai Time..
          enabled: true     

resources:
  extensions:
    # Name of function <longJobsProcessor>
    LongJobsProcessorLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: 'arn:aws:elasticfilesystem:${self:provider.region}:037792882519:access-point/${self:custom.efsAccessPoint}'
            LocalMountPath: '${self:custom.localMountPath}'  