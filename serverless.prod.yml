
service:
  name: ${self:custom.serviceName}
  
  # You can pin your service to only deploy with a specific Serverless version
  # Check out our docs for more details
  # frameworkVersion: "=X.X.X"
  
plugins:
  # - serverless-apigw-binary
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-s3-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: production
  region: us-east-1
  memorySize: 3000
  timeout: 30
  environment: 
  vpc:
    securityGroupIds:
      - sg-f4e38fd6
    subnetIds:
      - subnet-294c8076
      - subnet-cec80ba8
      - subnet-277fb106
      - subnet-e50093a8
  

custom:
  serviceName: servicemind-backend
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: servicemind-resources
  defaultStage: production
  profiles:
    dev: servicemind-dev
    production: servicemind-production
  apigwBinary:
    types:
      - "*/*"
  
  
functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true

  queueProcessor:
    handler: src/app.queueProcessor
    batchSize: 1                           # Using a batchSize of 1, so that messages succeed or fail on their own.
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: arn:aws:sqs:us-east-1:037792882519:mail-queue


  longJobsProcessor:
    handler: src/app.longJobsProcessor
    batchSize: 1                           # Using a batchSize of 1, so that messages succeed or fail on their own.
    memorySize: 2048
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: arn:aws:sqs:us-east-1:037792882519:long-jobs


  websocket:
    handler: src/socket.handler
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              # - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect

  auth:
    handler: src/socket.auth
  
  workOrderOverdueProcessor:
    handler: src/app.workOrderOverdueProcessor
    memorySize: 1024
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


  dailyDigestProcessor:
    handler: src/app.dailyDigestProcessor
    memorySize: 1024
    timeout:  899                     # Max Time out is 15 mins..
    events:
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8 am Morning Thai Time..
          enabled: true        


  