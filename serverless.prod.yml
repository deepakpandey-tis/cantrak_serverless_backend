
service: ${self:custom.serviceName}
  
  # You can pin your service to only deploy with a specific Serverless version
  # Check out our docs for more details
  # frameworkVersion: "=X.X.X"
  
plugins:
  - serverless-plugin-lambda-insights


package:
  patterns:
    - '!.vscode/**'
    - '!.serverless/**'


provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: ap-southeast-1
  memorySize: 3000
  timeout: 29
  tracing:
    apiGateway: true
    lambda: true
  iam: 
    role: 
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: 
            - arn:aws:s3:::*
        - Effect: Allow
          Action:
            - sqs:*
          Resource: 
            - arn:aws:sqs:::*
        - Effect: Allow
          Action:
            - sns:*
          Resource: 
            - arn:aws:sns:::*
        - Effect: Allow
          Action:
            - rekognition:*
          Resource: 
            - arn:aws:rekognition:::*
        - Effect: Allow
          Action:
            - ses:*
          Resource: 
            - arn:aws:ses:::*
        - Effect: Allow
          Action:
            - cloudwatch:*
          Resource: 
            - arn:aws:cloudwatch:::*
        - Effect: Allow
          Action:
            - events:*
          Resource: 
            - arn:aws:events:::*                    
      managedPolicies:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess              
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DB_USER: pg888
    DB_PASS: su99yTIS#2021
    DB_NAME: pg888
    DB_HOST: pg888-db-cluster-instance-1.cvlfqh5yw9tp.ap-southeast-1.rds.amazonaws.com
    DB_PORT: 5432
    SITE_URL: https://d1m3726mxf0335.cloudfront.net
    ORIGIN_URL: https://5dec4xg2n8.execute-api.ap-southeast-1.amazonaws.com/production
    JWT_PRIVATE_KEY: t6sadtrtt54ysfdf5y*hjhfd&56640)hkuksadasdas
    JWT_ACCESS_TOKEN_EXPIRY_TIME: 60m
    JWT_REFRESH_TOKEN_EXPIRY_TIME: 96h
    S3_BUCKET_NAME: pg888-resources
    VAPID_PUBLIC_KEY: BMpCMLxldme4F8BHAKyz41cAEh8FgFvibgwdJrM7LH8Th5t47J84NVGZiPhuTOEKRBOzfsJMAgXQueLjPyoc8z0
    VAPID_PRIVATE_KEY: MwnSWApwHAJZXnhk6K1s9jqS_ndArrcMSGuI60c7gZc
    ACCESS_KEY_ID: AKIA2PLM3DNSLWMFB57N
    SECRET_ACCESS_KEY: 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
    SQS_MAIL_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/720172161892/mail-queue
    SQS_LONG_JOBS_URL: https://sqs.ap-southeast-1.amazonaws.com/720172161892/long-jobs
    FROM_EMAIL_ADDRESS: no-reply@servicemind.asia
    APP_ENV: PRODUCTION
    S3_BUCKET_URL:  https://pg888-resources.s3.ap-southeast-1.amazonaws.com
    SOCKET_ENDPOINT: wss://k0l99tstv9.execute-api.ap-southeast-1.amazonaws.com/production
    # CDN_URL: resources.servicemind.asia
    REDIS_HOST: pg888-redis.kdebs8.ng.0001.apse1.cache.amazonaws.com
    REDIS_PORT: 6379,
    MNT_DIR: ${self:custom.localMountPath}
  vpc:
    securityGroupIds:
      - sg-03ab4859828983c2a
    subnetIds:
      - subnet-04167c7353716ccb9
      - subnet-054ddfd13f02560b9
  

custom:
  serviceName: pg888
  awsAccountId: "720172161892"
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: pg888-resources-prod
  defaultStage: prod
  profiles:
    dev: dev
    stage: stage
    prod: prod
  efsAccessPoint: fsap-065866bda3f6405f1
  localMountPath: /mnt/efs
  lambdaInsights:
    defaultLambdaInsights: true #enables Lambda Insights for all functions
  
  
functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true
  
  websocket:
    handler: src/handlers/socket.handler
    memorySize: 2048
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              # - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect

  auth:
    handler: src/handlers/socket.auth


  SQS:
    handler: src/handlers/jobs.queueProcessor
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: 
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:mail-queue
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.


  longJobsProcessor:
    handler: src/handlers/jobs.longJobsProcessor
    memorySize: 5120
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:long-jobs
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.

          
  workOrderOverdueProcessor:
    handler: src/handlers/daily-tasks.workOrderOverdueProcessor
    memorySize: 512
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


resources:
  extensions:
    # Name of function <longJobsProcessor>
    LongJobsProcessorLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: 'arn:aws:elasticfilesystem:${self:provider.region}:${self:custom.awsAccountId}:access-point/${self:custom.efsAccessPoint}'
            LocalMountPath: '${self:custom.localMountPath}'