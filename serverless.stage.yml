
service: ${self:custom.serviceName}
  
  # You can pin your service to only deploy with a specific Serverless version
  # Check out our docs for more details
  # frameworkVersion: "=X.X.X"
  
plugins:
  - serverless-plugin-lambda-insights
  - serverless-prune-plugin


package:
  patterns:
    - '!.vscode/**'
    - '!.git/**'
    - '!cantrak_docker/**'
    - '!.gitignore'


provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: ap-southeast-1
  memorySize: 3072
  timeout: 29
  tracing:
    apiGateway: true
    lambda: true
  iam: 
    role: 
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: 
            - arn:aws:s3:::*
        - Effect: Allow
          Action:
            - sqs:*
          Resource: 
            - arn:aws:sqs:::*
        - Effect: Allow
          Action:
            - sns:*
          Resource: 
            - arn:aws:sns:::*
        - Effect: Allow
          Action:
            - rekognition:*
          Resource: 
            - arn:aws:rekognition:::*
        - Effect: Allow
          Action:
            - ses:*
          Resource: 
            - arn:aws:ses:::*
        - Effect: Allow
          Action:
            - cloudwatch:*
          Resource: 
            - arn:aws:cloudwatch:::*
        - Effect: Allow
          Action:
            - events:*
          Resource: 
            - arn:aws:events:::*
        - Effect: Allow
          Action:
            - execute-api:*
          Resource: 
            - arn:aws:execute-api:::*    
      managedPolicies:
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess              
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DB_USER: pg888
    DB_PASS: su99yTIS#2021
    DB_NAME: pg888
    DB_HOST: db-writer.staging.cantrak.tech
    DB_PORT: 5432
    SITE_URL: https://app.staging.cantrak.tech
    ORIGIN_URL: https://3ny522i0tg.execute-api.ap-southeast-1.amazonaws.com/production
    JWT_PRIVATE_KEY: t6sadtrtt54ysfdf5y*hjhfd&56640)hkuksadasdas
    JWT_ACCESS_TOKEN_EXPIRY_TIME: 60m
    JWT_REFRESH_TOKEN_EXPIRY_TIME: 96h
    S3_BUCKET_NAME: pg888-resources
    VAPID_PUBLIC_KEY: BMpCMLxldme4F8BHAKyz41cAEh8FgFvibgwdJrM7LH8Th5t47J84NVGZiPhuTOEKRBOzfsJMAgXQueLjPyoc8z0
    VAPID_PRIVATE_KEY: MwnSWApwHAJZXnhk6K1s9jqS_ndArrcMSGuI60c7gZc
    ACCESS_KEY_ID: AKIA2PLM3DNSLWMFB57N
    SECRET_ACCESS_KEY: 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
    SQS_MAIL_QUEUE_URL: https://sqs.ap-southeast-1.amazonaws.com/720172161892/mail-queue
    SQS_LONG_JOBS_URL: https://sqs.ap-southeast-1.amazonaws.com/720172161892/long-jobs
    SQS_SYNC_CAL_URL: https://sqs.ap-southeast-1.amazonaws.com/720172161892/sync-calendar
    FROM_EMAIL_ADDRESS: no-reply@servicemind.asia
    APP_ENV: PRODUCTION
    S3_BUCKET_URL:  https://cantrak-staging-resources.s3.ap-southeast-1.amazonaws.com
    SOCKET_ENDPOINT: wss://16z5ox70r8.execute-api.ap-southeast-1.amazonaws.com/production
    # CDN_URL: resources.servicemind.asia
    REDIS_HOST: redis-cluster.mal7gr.ng.0001.apse1.cache.amazonaws.com
    REDIS_PORT: 6379,
    MNT_DIR: ${self:custom.localMountPath}
    GOOGLE_CLIENT_SECRET: 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
    GOOGLE_CLIENT_ID: 423057939767-4smipfn7q9qfmvn8p9ku121ch4kmmned.apps.googleusercontent.com
    GOOGLE_REDIRECT_URL: google-auth-callback

  vpc:
    securityGroupIds:
      - sg-0a55b8537f845dd00
    subnetIds:
      - subnet-0e9751e8fe5e4a261
      - subnet-08b185f7f8c1365d4
  

custom:
  serviceName: cantrak
  awsAccountId: "302128947681"
  awsContainerImageId: 302128947681.dkr.ecr.ap-southeast-1.amazonaws.com/cantrak-backend
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: cantrak-resources-staging
  defaultStage: stage
  profiles:
    dev: dev
    stage: stage
    prod: prod
  efsAccessPoint: fsap-07f4fe775952aefa5
  localMountPath: /mnt/efs

  
functions:
  app:
    # handler: src/app.server # reference the file and exported method
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/app.server
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true
  
  websocket:
    # handler: src/handlers/socket.handler
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/socket.handler
    memorySize: 2048
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              # - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect

  auth:
    # handler: src/handlers/socket.auth
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/socket.auth
    


  SQS:
    # handler: src/handlers/jobs.queueProcessor
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/jobs.queueProcessor
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: 
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:mail-queue
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.


  longJobsProcessor:
    # handler: src/handlers/jobs.longJobsProcessor
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/jobs.longJobsProcessor
    memorySize: 5120
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:long-jobs
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.

          
  workOrderOverdueProcessor:
    # handler: src/handlers/daily-tasks.workOrderOverdueProcessor
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/daily-tasks.workOrderOverdueProcessor
    memorySize: 512
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


  syncEventsToGoogleCalendar:
    #handler: src/handlers/daily-tasks.syncGoogleCalendarEvents
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/daily-tasks.syncEventsToGoogleCalendar 
    memorySize: 1024
    timeout:  899                     # Max Time out is 15 mins..
    events:
      - schedule:
          rate: cron(50 */3 * * ? *)    # Utc 9 pm every day i.e 4 am Morning Thai Time..
          #rate: rate(5 minutes)
          enabled: true

  

  calSyncQueueProcessor:
    # handler: src/handlers/jobs.longJobsProcessor
    image:
      uri: ${self:custom.awsContainerImageId}@${param:digest}
      command: 
        - src/handlers/jobs.calSyncQueueProcessor
    memorySize: 1024
    timeout: 150                           # 2.5 Mins...
    reservedConcurrency: 1                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:sync-calendar
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.



resources:
  extensions:
    # Name of function <longJobsProcessor>
    LongJobsProcessorLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: 'arn:aws:elasticfilesystem:${self:provider.region}:${self:custom.awsAccountId}:access-point/${self:custom.efsAccessPoint}'
            LocalMountPath: '${self:custom.localMountPath}'
