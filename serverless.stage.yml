
service:
  name: ${self:custom.serviceName}
  
  # You can pin your service to only deploy with a specific Serverless version
  # Check out our docs for more details
  # frameworkVersion: "=X.X.X"
  
plugins:
  # - serverless-apigw-binary
  - serverless-offline
  # - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-prune-plugin
  # - serverless-domain-manager

package:
  exclude:
    - .vscode/**
    - .serverless/**


provider:
  name: aws
  runtime: nodejs12.x
  stage: stage
  region: us-east-1
  memorySize: 3000
  timeout: 30
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - arn:aws:s3:::*
    - Effect: Allow
      Action:
        - sqs:*
      Resource: 
        - arn:aws:sqs:::*
    - Effect: Allow
      Action:
        - sns:*
      Resource: 
        - arn:aws:sns:::*
  iamManagedPolicies:
      - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess              
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DB_USER: servicemind
    DB_PASS: su88yTIS#2020
    DB_NAME: tis_database
    DB_HOST: tis-dev-db-cluster.cluster-cwvy98foaa62.us-east-1.rds.amazonaws.com
    DB_PORT: 5432
    SITE_URL: https://d3m3k4hno3r3ok.cloudfront.net
    ORIGIN_URL: https://uhg34qu8u4.execute-api.us-east-1.amazonaws.com/stage
    JWT_PRIVATE_KEY: t9785464sdxfkgxhil8ed@gusu4^^464)(bu54654645
    S3_BUCKET_NAME: servicemind-resources-dev
    VAPID_PUBLIC_KEY: BMpCMLxldme4F8BHAKyz41cAEh8FgFvibgwdJrM7LH8Th5t47J84NVGZiPhuTOEKRBOzfsJMAgXQueLjPyoc8z0
    VAPID_PRIVATE_KEY: MwnSWApwHAJZXnhk6K1s9jqS_ndArrcMSGuI60c7gZc
    ACCESS_KEY_ID: AKIA5PDX4XIDSRD6YUW7
    SECRET_ACCESS_KEY: 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
    SQS_MAIL_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/925816896007/mail-queue
    SQS_LONG_JOBS_URL: https://sqs.us-east-1.amazonaws.com/925816896007/long-jobs
    FROM_EMAIL_ADDRESS: important-notifications@staging.servicemind.asia
    APP_ENV: STAGE
    NOTIFIER_ACCESS_KEY_ID: AKIA5PDX4XIDW7DJLY6P
    NOTIFIER_SECRET_ACCESS_KEY: 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
    S3_BUCKET_URL:  https://servicemind-resources-dev.s3.amazonaws.com
    SOCKET_ENDPOINT: https://ivi2nvi8sj.execute-api.us-east-1.amazonaws.com/stage
    CDN_URL: resources.staging.servicemind.asia
    REDIS_HOST: tis-dev-redis.2okp6i.0001.use1.cache.amazonaws.com
    REDIS_PORT: 6379
    MNT_DIR: ${self:custom.localMountPath} 
    THIRDPARTY_SNS_ARN: arn:aws:sns:ap-southeast-1:175922227966:servicemind-thirdparty-notifications
    THIRDPARTY_SNS_ARN_REGION: ap-southeast-1
  vpc:
    securityGroupIds:
      - sg-6a527248
    subnetIds:
      - subnet-94cc03cb
      - subnet-35488b53
      - subnet-c5fc35e4
      - subnet-7f831132
  

custom:
  serviceName: servicemind-st
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: servicemind-resources
  defaultStage: stage
  profiles:
    dev: servicemind-dev
    stage: servicemind-stage
    production: servicemind-production
  efsAccessPoint: fsap-0269bbe5bddaa6925
  localMountPath: /mnt/efs  
  
  
functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true
  
  websocket:
    handler: src/handlers/socket.handler
    memorySize: 2048
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              # - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect

  auth:
    handler: src/handlers/socket.auth


  queueProcessor:
    handler: src/handlers/jobs.queueProcessor
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: 
          arn: arn:aws:sqs:us-east-1:925816896007:mail-queue
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.


  longJobsProcessor:
    handler: src/handlers/jobs.longJobsProcessor
    memorySize: 5120
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:925816896007:long-jobs
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.

          
  workOrderOverdueProcessor:
    handler: src/handlers/daily-tasks.workOrderOverdueProcessor
    memorySize: 512
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


  dailyDigestProcessor:
    handler: src/handlers/daily-tasks.dailyDigestProcessor
    memorySize: 1024
    timeout:  899                     # Max Time out is 15 mins..
    events:
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8 am Morning Thai Time..
          enabled: true        


  dailyDbWakeUpProcessor:
    handler: src/handlers/daily-tasks.dBWakeUpTask
    memorySize: 256
    timeout:  300                     # Max Time out is 5 mins..
    events:
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8:00 am Morning Thai Time..
          enabled: true
      - schedule:
          rate: cron(30 1 * * ? *)    # Utc 1 am every day i.e 8:30 am Morning Thai Time..
          enabled: true
      - schedule:
          rate: cron(0 2 * * ? *)    # Utc 1 am every day i.e 9 am Morning Thai Time..
          enabled: true     


resources:
  extensions:
    # Name of function <longJobsProcessor>
    LongJobsProcessorLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: 'arn:aws:elasticfilesystem:${self:provider.region}:925816896007:access-point/${self:custom.efsAccessPoint}'
            LocalMountPath: '${self:custom.localMountPath}'