
service:
  name: ${self:custom.serviceName}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-apigw-binary
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-s3-local
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  memorySize: 3000
  timeout: 30
  environment: 


custom:
  serviceName: tis-serverless-backend
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: sls-app-resources-bucket
  defaultStage: dev
  profiles:
    dev: tis-dev
    prod: tis-prod
  apigwBinary:
    types:
      - "*/*"


functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true
  webhook:
    handler: src/app.webhook
    events:
      - http:
         method: GET
         path: webhook
  emailSender:
    handler: src/app.emailQueueProcessor
    batchSize: 1                           # Using a batchSize of 1, so that messages succeed or fail on their own.
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs: arn:aws:sqs:us-east-2:525317543069:email-messages-queue
