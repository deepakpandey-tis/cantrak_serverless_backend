
service:
  name: ${self:custom.serviceName}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline
  - serverless-s3-local
  - serverless-prune-plugin
  
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  memorySize: 2048
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - arn:aws:s3:::*
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    DB_USER: servicemind
    DB_PASS: password
    DB_NAME: tis_database
    DB_HOST: localhost
    DB_PORT: 5432
    SITE_URL: http://localhost:4200
    ORIGIN_URL: http://localhost:3000
    IS_OFFLINE: true
    JWT_PRIVATE_KEY: t978$wrtt435b4vjut#5dfghs)(bud33d3
    S3_BUCKET_NAME: local-bucket
    VAPID_PUBLIC_KEY: BMpCMLxldme4F8BHAKyz41cAEh8FgFvibgwdJrM7LH8Th5t47J84NVGZiPhuTOEKRBOzfsJMAgXQueLjPyoc8z0
    VAPID_PRIVATE_KEY: MwnSWApwHAJZXnhk6K1s9jqS_ndArrcMSGuI60c7gZc
    ACCESS_KEY_ID: S3RVER
    SECRET_ACCESS_KEY: S3RVER
    SQS_MAIL_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/925816896007/mail-queue
    SQS_LONG_JOBS_URL: https://sqs.us-east-1.amazonaws.com/925816896007/long-jobs
    FROM_EMAIL_ADDRESS: important-notifications@staging.servicemind.asia
    NOTIFIER_ACCESS_KEY_ID: AKIA5PDX4XIDW7DJLY6P
    NOTIFIER_SECRET_ACCESS_KEY: 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
    S3_BUCKET_URL:  http://local-bucket.s3.amazonaws.com:8000
    SOCKET_ENDPOINT: http://0.0.0.0:3001
    CDN_URL: http://local-bucket.s3.amazonaws.com:8000
    REDIS_HOST: 127.0.0.1
    REDIS_PORT: 6379

custom:
  serviceName: tis-serverless-backend
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  bucket: local-bucket
  defaultStage: dev
  profiles:
    dev: tis-dev
    prod: tis-dev
  apigwBinary:
    types:
      - "*/*"
  s3:
    # Uncomment the following line only if you want to specify host address of S3 service.
    # adress: 0.0.0.0
    # Uncomment the following line only if you want to specify S3 server address.
    # Ordinary, this value is localhost. But you can modify this value to use other S3 server.
    # host: 0.0.0.0
    port: 8000
    directory: ./tmp  # this directory must be already created.
    # Uncomment the first line only if you want to use cors with specified policy
    # Uncomment the second line only if you don't want to use cors
    # Not uncomment the these lines only if your wanto use cors with default policy
    cors: ./s3cors.xml
    # website: relative/path/to/your/website.xml
    # Uncomment only if you already have a S3 server running locally
    # noStart: true

# resources:
#   Resources:
#     NewResource:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:custom.bucket}
        
functions:
  app:
    handler: src/app.server # reference the file and exported method
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          # cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          # cors: true
  
  s3hook:
    handler: src/app.s3hook
    events:
      - s3: 
         bucket: ${self:custom.bucket}
         event: s3:*

  queueProcessor:
    handler: src/app.queueProcessor
    memorySize: 1024
    timeout: 150
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:925816896007:mail-queue
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.




  longJobsProcessor:
    handler: src/app.longJobsProcessor
    memorySize: 2048
    timeout: 900                           # 15 Mins...
    reservedConcurrency: 10                # <-- Concurrency control
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:925816896007:long-jobs
          batchSize: 1                     # Using a batchSize of 1, so that messages succeed or fail on their own.



  
  websocket:
    handler: src/socket.handler
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and there it should be handled
          # like a session ID.
          authorizer:
            name: auth
            # See https://serverless.com/framework/docs/providers/aws/events/websocket#using-authorizers
            # and https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html#cfn-apigatewayv2-authorizer-identitysource
            # for more details on identitySource.
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
            # for more details on API Gateway mappings.
            identitySource:
              - "route.request.header.Auth"
              - "route.request.querystring.Auth"

      - websocket:
          # Route messages here if '$request.body.action' is 'routeA'.
          # You can adjust which property to use for routing by adjusting
          # 'websocketsApiRouteSelectionExpression'.
          route: api

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect

  auth:
    handler: src/socket.auth

  workOrderOverdueProcessor:
    handler: src/app.workOrderOverdueProcessor
    memorySize: 1024
    timeout: 300
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true


  dailyDigestProcessor:
    handler: src/app.dailyDigestProcessor
    memorySize: 1024
    timeout: 899                     # Max Time out is 15 mins..
    events:
      - schedule:
          rate: cron(0 1 * * ? *)    # Utc 1 am every day i.e 8 am Morning Thai Time..
          enabled: true        
